using NArchitectureCodeGenerator.Helpers.FileAppenderHelper.Appenders.Abstract;
using NArchitectureCodeGenerator.Helpers.FileAppenderHelper.Entities;
using NArchitectureCodeGenerator.Helpers.FileHelper.Service;
using System.Collections.Generic;
using System.Linq;

namespace NArchitectureCodeGenerator.Helpers.FileAppenderHelper.Appenders.Concrete
{
    public class PersistenceServiceRegistrationAppender : BaseAppenderForCodeGenerator
    {
        public PersistenceServiceRegistrationAppender(IFileService fileService) : base(fileService)
        {
        }

        protected override void ControlUsingStatements(ref List<string> lines)
        {

            var usingStatements = new List<string>
            {
                $"using {ProjectHelper.ApplicationProjectName}.Services.Repositories;",
                $"using {ProjectHelper.PersistenceProjectName}.Repositories;",

            };

            foreach (var usingStatement in usingStatements)
            {
                if (!lines.Any(line => line.Contains(usingStatement)))
                    lines.Insert(0, usingStatement);
            }

        }

        protected override string GetFilePath()
        {
            return _fileService.CombinePaths(ProjectHelper.RootPath, ProjectHelper.PersistenceProjectName, "PersistenceServiceRegistration.cs");
        }

        protected override string GetLineContentToAdd()
        {
            return $"\t\t\tservices.AddScoped<I{_entityInfo.Name}Repository, {_entityInfo.Name}Repository>();";
        }

        protected override List<LineNumberDecider> GetLineNumberDeciderList()
        {
            return new List<LineNumberDecider>
            {
                new LineNumberDecider(".*AddScoped<.*>.*", 1),
                new LineNumberDecider(".*\\/\\/\\*\\*\\*Repository here - autogenerated\\*\\*\\*.*$", 1),
                new LineNumberDecider(".*public static IServiceCollection AddPersistenceServices.*", 0, true),
                new LineNumberDecider(".*return.*", -1)
            };

        }
    }
}
