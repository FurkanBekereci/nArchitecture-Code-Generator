using NArchitectureCodeGenerator.Helpers.FileAppenderHelper.Entities;
using NArchitectureCodeGenerator.Helpers.FileAppenderHelper.Appenders.Abstract;
using NArchitectureCodeGenerator.Extensions;
using NArchitectureCodeGenerator.Helpers;
using NArchitectureCodeGenerator.Helpers.FileHelper.Service;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NArchitectureCodeGenerator.Helpers.FileAppenderHelper.Appenders.Concrete
{
    public class ApplicationServiceRegistrationAppender : BaseAppenderForCodeGenerator
    {
        
        public ApplicationServiceRegistrationAppender(IFileService fileService) : base(fileService)
        {
        }

        protected override void ControlUsingStatements(ref List<string> lines)
        {
            var usingStatement = $"using {ProjectHelper.ApplicationProjectName}.Features.{_entityInfo.Name.Pluralize()}.Rules;";

            if (!lines.Any(line => line.Contains(usingStatement)))
                lines.Insert(0, usingStatement);

        }

        protected override string GetFilePath()
        {
            return _fileService.CombinePaths(ProjectHelper.RootPath, ProjectHelper.ApplicationProjectName, "ApplicationServiceRegistration.cs");
        }

        protected override List<LineNumberDecider> GetLineNumberDeciderList()
        {

            return new List<LineNumberDecider>
            {
                new LineNumberDecider(".*AddScoped<.*>.*", 1),
                new LineNumberDecider(".*\\/\\/\\*\\*\\*Business rules here - autogenerated\\*\\*\\*.*$", 1),
                new LineNumberDecider(".*public static IServiceCollection AddApplicationServices.*", 0, true),
                new LineNumberDecider(".*return.*", -1)
            };

        }

        protected override string GetLineContentToAdd()
        {
            return $"\t\t\tservices.AddScoped<{_entityInfo.Name}BusinessRules>();";
        }
    }
}
