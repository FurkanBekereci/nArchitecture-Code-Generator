using AutoMapper;
using {applicationProjectName}.Features.{entityNamePlural}.Dtos;
using {applicationProjectName}.Features.{entityNamePlural}.Rules;
using {applicationProjectName}.Services.Repositories;
using {domainProjectName}.Entities;
using MediatR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace {namespace}
{
    public class {name} : IRequest<{dtoName}>
    {

        public class {name}Handler : IRequestHandler<{name}, {dtoName}>
        {
            private readonly I{entityName}Repository _{entityNameCamelCase}Repository;
            private readonly IMapper _mapper;
            private readonly {entityName}BusinessRules _{entityNameCamelCase}BusinessRules;

            public {name}Handler(I{entityName}Repository {entityNameCamelCase}Repository, IMapper mapper, {entityName}BusinessRules {entityNameCamelCase}BusinessRules)
            {
                _{entityNameCamelCase}Repository = {entityNameCamelCase}Repository;
                _mapper = mapper;
                _{entityNameCamelCase}BusinessRules = {entityNameCamelCase}BusinessRules;
            }

            public async Task<{dtoName}> Handle({name} request, CancellationToken cancellationToken)
            {
                {entityName} {entityNameCamelCase} = _mapper.Map<{entityName}>(request);

                {entityName} result{entityName} = await _{entityNameCamelCase}Repository.{operationType}Async({entityNameCamelCase});

                {dtoName} result{dtoName} = _mapper.Map<{dtoName}>(result{entityName});

                return result{dtoName};
            }
        }
    }
}